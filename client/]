import React, { useEffect, useReducer, useState } from 'react';
import {
    Button,
    FlatList,
    StyleSheet,
    Switch,
    Text,
    View,
    YellowBox,
} from 'react-native';

import io from 'socket.io-client';

const INITIAL_STATE = {
    geladeira: {
        nivelAgua: 0,
        comidas: []
    },
    comodos: []
};

//   ____    _    __  __ ____ ___    _    ____  ____      _
//  / ___|  / \  |  \/  | __ )_ _|  / \  |  _ \|  _ \    / \
// | |  _  / _ \ | |\/| |  _ \| |  / _ \ | |_) | |_) |  / _ \
// | |_| |/ ___ \| |  | | |_) | | / ___ \|  _ <|  _ <  / ___ \
//  \____/_/   \_\_|  |_|____/___/_/   \_\_| \_\_| \_\/_/   \_\
//
YellowBox.ignoreWarnings(['Setting a timer']);
console.warn = message => { };

const onConnect = (socket, setStatus) => {
    console.log("connection succesfully established");
    socket.emit("smartevent", { event: "oninitialconnection", payload: {} });
    setStatus("Conectado ao servidor!");
}

const onDisconnect = (setStatus) => {
    console.log("connection end");
    setStatus("Disconnected")
}

const onError = console.error;

const onInitialConnection = (payload, dispatchGeneralState) => {
    console.clear();
    console.log("onInitialConnection()");
    console.log(ACTIONS);
    dispatchGeneralState({ type: ACTIONS.UPDATE_ALL, payload });
}

const onUpdateData = (serverAction, dispatchGeneralState) => {
    console.log("==== onUpdateData() ====");
    dispatchGeneralState(serverAction.event, serverAction.payload);
};

interface Data {
    geladeira: FridgeData;
    comodos: Array<RoomData>;
};

interface FridgeData {
    nivelAgua: float;
    comidas: Array<FoodData>;
}

interface FoodData {
    id: number;
    nome: string;
    quantidade: string;
}

interface RoomData {}

interface Action {
    type: string;
    payload: payloadType;
};

type payloadType = number | fridgeItemProps;

const ACTIONS = {
    UPDATE_ALL: "UPDATE_ALL",
    UPDATE_FRIDGE_WATER_LEVEL: "UPDATE_FRIDGE_WATER_LEVEL",
    UPDATE_FOOD: "UPDATE_FOOD"
};

// TODO: rename Data, extrair de switch para objeto
const setDataReducer = (state, action) => {
    switch(action.type) {
        case ACTIONS.UPDATE_ALL:
            return action.payload;
        case ACTIONS.UPDATE_FRIDGE_WATER_LEVEL:
            return {
                ...state,
                geladeira: {
                    ...state.geladeira,
                    nivelAgua: action.payload,
                }
            };
        case ACTIONS.UPDATE_FOOD:
            return {
                ...state,
                geladeira: {
                    ...state.geladeira,
                    comidas: [
                        ...state
                            .geladeira
                            .comidas
                            .filter(food => food.id === action.payload.id),
                        action.payload
                    ]
                }
            };
        default:
            return state;
    }
};

// TODO: interface de objeto de handlers?
const setupServerConnection = ({ setStatus, dispatchGeneralState }) => {
    console.log("setting up server connection");
    try {
        // TODO: extair para variáveis (ambiente?)
        const socket = io("http://10.1.0.122:3000", {"transports": ["websocket", "polling"]});
        socket.on("connect", () => onConnect(socket, setStatus));
        socket.on("updateData", serverAction => onUpdateData(serverAction, dispatchGeneralState));
        socket.on("initialconnection", (payload) => onInitialConnection(payload, dispatchGeneralState));
        socket.on("disconnect", () => onDisconnect(setStatus));
        socket.on("error", onError);
        socket.on("connect_error", console.log); // TODO: REMOVE
        return socket;
    } catch (err) {
        console.error(err);
    }
};

export default function App() {
    const [connectionStatus, setConnectionStatus] = useState<string>("Sem conexão");
    // TODO: criar estado inicial, corrigir generic
    const [data, dispatchGeneralState] = useReducer<Data>(setDataReducer, INITIAL_STATE);
    const [socket, setSocket] = useState(null);
    console.log(data);
    useEffect(() => {
        const socketInit = setupServerConnection({ setStatus: setConnectionStatus, dispatchGeneralState });
        setSocket(socketInit);
    }, []);
    return (
        <View style={styles.container}>
            <View style={styles.header}>
                <Text>{connectionStatus}</Text>
            </View>
            <View style={styles.fridge}>
                <View style={styles.cardHeader}><Text style={styles.title}>Geladeira</Text></View>
                <Text>{`Nível d'água: ${data.geladeira.nivelAgua}%`}</Text>
                <FlatList
                    horizontal
                    data={data.geladeira.comidas || [{}]}
                    renderItem={({ item }) => <FridgeItem id={item.id} nome={item.nome} quantidade={item.quantidade} />}
                    keyExtractor={(item) => item.id}
                    ItemSeparatorComponent={() => <VerticalItemSeparator />}
                />
            </View>
            <View style={styles.rooms}>
                <FlatList
                    data={data.comodos || [{}]}
                    renderItem={({ item }) => <RoomItem id={item.id} roomData={item} />}
                    keyExtractor={(item) => item.id}
                    ItemSeparatorComponent={() => <HorizontalItemSeparator />}
                />
            </View>
        </View>
    );
}

interface fridgeItemProps {
    id: number;
    nome: string;
    quantidade: string;
};

const FridgeItem = (fridgeItemProps) => (
    <View style={fridgeStyles.block}>
        <Text style={fridgeStyles.name}>{fridgeItemProps.nome}</Text>
        <Text>{fridgeItemProps.quantidade}</Text>
    </View>
);

const VerticalItemSeparator = () => (
    <View style={{ width: 8 }} />
);

const fridgeStyles = StyleSheet.create({
    block: {
        borderRadius: 4,
        borderWidth: 1,
        borderStyle: "solid",
        width: 120,
        height: 75,
        justifyContent: "center",
        alignItems: "center",
    },
    name: {
        textAlign: "center",
        fontWeight: "bold"
    },
});

const RoomItem = ({ roomData }) => (
    <View>
        <Text style={roomStyles.name}>{roomData.nome}</Text>
		<View style={roomStyles.row}>
			<View style={roomStyles.columnOne}></View>
            <View style={roomStyles.columnTwo}><Text>Medição</Text></View>
            <View style={roomStyles.columnThree}><Text>Setpoint</Text></View>
            <View style={roomStyles.columnFour}></View>
		</View>
		<View style={roomStyles.row}>
            <View style={roomStyles.columnOne}><Text>Temperatura</Text></View>
            <View style={roomStyles.columnTwo}><Text>{roomData.clima.temperatura}</Text></View>
            <View style={roomStyles.columnThree}><Text>{roomData.iluminacao.setpoint}</Text></View>
            <View style={roomStyles.columnFour}><Switch /></View>
		</View>
		<View style={roomStyles.row}>
            <View style={roomStyles.columnOne}><Text>Iluminação</Text></View>
            <View style={roomStyles.columnTwo}><Text>{roomData.clima.setpoint}</Text></View>
            <View style={roomStyles.columnThree}><Text>{roomData.iluminacao.lumens}</Text></View>
            <View style={roomStyles.columnFour}><Switch /></View>
		</View>
	</View>
);

// TODO: realocar
const titleStyle = {
    fontWeight: "bold",
    fontSize: 18,
    textAlign: "center",
    paddingBottom: 12,
};

const HorizontalItemSeparator = () => (
    <View style={{ height: 8 }} />
);

const roomStyles = StyleSheet.create({
    row: {
        flexDirection: "row",
        paddingBottom: 8,
    },
    name: {
        ...titleStyle,
    },
    columnOne: {
        flex: 3,
    },
    columnTwo: {
        flex: 2,
    },
    columnThree: {
        flex: 2,
    },
    columnFour: {
        flex: 1,
    }
});

const styles = StyleSheet.create({
    container: {
        flex: 1,
        backgroundColor: '#fff',
        alignItems: 'center',
        justifyContent: 'center',
        width: "100%",
    },
    header: {
        flex: 1,
        width: "100%",
        alignItems: "flex-end",
        paddingTop: 36,
        paddingRight: 24,
    },
    fridge: {
        flex: 4,
        width: "100%",
        paddingRight: 24,
        paddingLeft: 24,
    },
    cardHeader: {
        alignItems: "center",
    },
    title: {
        ...titleStyle,
    },
    rooms: {
        flex: 14,
        width: "100%",
        paddingRight: 24,
        paddingLeft: 24,
    },
});
